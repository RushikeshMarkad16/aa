# -*- coding: utf-8 -*-
"""Assignment_No_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PItYbsPQYaZ2oWHSGMkcAywfTgF69RKC

# Data Wrangling II

Create an “Academic performance” dataset of students and perform the following operations using Python.
1.	Scan all variables for missing values and inconsistencies. If there are missing values and/or inconsistencies, use any of
    the suitable techniques to deal with them.
2.	Scan all numeric variables for outliers. If there are outliers, use any of the suitable techniques to deal with them.
3.	Apply data transformations on at least one of the variables. The purpose of this transformation should be one of the 
    following reasons: to change the scale for better understanding of the variable, to convert a non-linear relation into a 
    linear one, or to decrease the skewness and convert the distribution into a normal distribution.

    Reason and document your approach properly.
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import scipy.stats as stats
import pylab

"""# Initial Processing"""

# https://www.kaggle.com/spscientist/students-performance-in-exams

df = pd.read_csv('StudentsPerformance.csv')
df

pd.isna(df)

df.describe()

df.info()

"""# Task1: Handling Null Values"""

df.isna().sum()

mean_value = int(df['math score'].mean())
df['math score'].fillna(value=mean_value, inplace=True)

mean_value = int(df['reading score'].mean())
df['reading score'].fillna(value=mean_value, inplace=True)

mean_value = int(df['writing score'].mean())
df['writing score'].fillna(value=mean_value, inplace=True)

df2 = df
df

df.isna().sum()

"""# Task2: Outlier Detection"""

# 1. IQR(Inter Quartile Range)

# Detection

Q1 = np.percentile(df['math score'], 25, interpolation = 'midpoint') 
Q3 = np.percentile(df['math score'], 75, interpolation = 'midpoint')
IQR = Q3 - Q1
print("Old Shape: ", df.shape) 
# Upper bound
upper = Q3+1.5*IQR
# Lower bound
lower = Q1-1.5*IQR
print("Upper bound : ", upper)
print("Lower bound : ", lower)

# Removing the Outliers
df = df[(df['math score']>=lower) & (df['math score']<=upper)]

print("New Shape: ", df.shape)

# Detection

Q1 = np.percentile(df['reading score'], 25, interpolation = 'midpoint') 
Q3 = np.percentile(df['reading score'], 75, interpolation = 'midpoint')
IQR = Q3 - Q1
print("Old Shape: ", df.shape) 
# Upper bound
upper = Q3+1.5*IQR
# Lower bound
lower = Q1-1.5*IQR
print("Upper bound : ", upper)
print("Lower bound : ", lower)

# Removing the Outliers
df = df[(df['reading score']>=lower) & (df['reading score']<=upper)]

print("New Shape: ", df.shape)

# 2. Visulization

sns.boxplot(x = df['writing score'])

# values below 30 are acting as the outliers.
print("Old Shape: ", df.shape) 
df = df[(df['writing score'] <= 100) & (df['writing score'] >= 30)]
print("New Shape: ", df.shape)

sns.boxplot(x = df['writing score'])

"""# Task3: Data Transformation"""

print('math score skewness : ', df2['math score'].skew())
print('reading score skewness : ', df2['reading score'].skew())
print('writing score skewness : ', df2['writing score'].skew())

# kde plot
sns.kdeplot(df2['math score'])

sns.kdeplot(df2['reading score'])

sns.kdeplot(df2['writing score'])

def normality(data,feature):
    plt.figure(figsize=(10,5))
    plt.subplot(1,2,1)
    sns.kdeplot(data[feature])
    plt.subplot(1,2,2)
    stats.probplot(data[feature],plot=pylab)
    plt.show()

normality(df2, 'writing score')

# Logarithmic Transformation
df2['writing_log'] = np.log(df2['writing score'])
normality(df2, 'writing_log')

# Reciprocol Transformation
df2['writing_rec'] = 1/df2['writing score']
normality(df2, 'writing_rec')

# Square Root Transformation
df2['writing_sqrt'] = np.sqrt(df2['writing score'])
normality(df2, 'writing_sqrt')

# Exponential Transformation
df2['writing_expo']= df2['writing score']**(1/1.2)
normality(df2, 'writing_expo')