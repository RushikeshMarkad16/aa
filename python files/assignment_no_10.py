# -*- coding: utf-8 -*-
"""Assignment No. 10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tFrY_ualACaBHoIhGFilEMIiWdOm___I

# Problem Statement :-

    Data Visualization III
        Download the Iris flower dataset or any other dataset into a DataFrame. (e.g.,
        https://archive.ics.uci.edu/ml/datasets/Iris). Scan the dataset and give the inference as:
            1. List down the features and their types (e.g., numeric, nominal) available in the dataset.
            2. Create a histogram for each feature in the dataset to illustrate the feature distributions.
            3. Create a box plot for each feature in the dataset.
            4. Compare distributions and identify outliers.

## Importing Libraries and dataset
"""

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import numpy as np

df = pd.read_csv("iris.csv")
df

df.isna().sum()

"""# Task1:"""

df.columns

df.info()
# there are 4 numeric columns and 1 nominal data type column

"""# Task2:"""

plt.figure(figsize = (10, 7))
x = df['sepal_length']

plt.hist(x, bins = 20, color = 'orange')
plt.title('Sepal Length in cm')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Count')
plt.show()

plt.figure(figsize = (10, 7))
x = df['sepal_width']

plt.hist(x, bins = 20, color = 'orange')
plt.title('Sepal Width in cm')
plt.xlabel('Sepal Width (cm)')
plt.ylabel('Count')
plt.show()

plt.figure(figsize = (10, 7))
x = df['petal_length']

plt.hist(x, bins = 20, color = 'orange')
plt.title('Petal Length in cm')
plt.xlabel('Petal Length (cm)')
plt.ylabel('Count')
plt.show()

plt.figure(figsize = (10, 7))
x = df['petal_width']

plt.hist(x, bins = 20, color = 'orange')
plt.title('Petal Width in cm')
plt.xlabel('Petal Width (cm)')
plt.ylabel('Count')
plt.show()

fig, axes = plt.subplots(2, 2, figsize=(16, 8))
axes = axes.flatten()
cols = df.columns[:4]
for i, k in enumerate(cols):
    axes[i].set_title('Distribution of ' + k)
    axes[i].hist(df[k])

"""# Task3:"""

sns.boxplot(data = df, x = 'sepal_length')

sns.boxplot(data = df, x = 'sepal_width')

sns.boxplot(data = df, x = 'petal_length')

sns.boxplot(data = df, x = 'petal_width')

fig, axes = plt.subplots(2, 2, figsize=(16, 8))
axes = axes.flatten()
cols = df.columns[:4]
for i, k in enumerate(cols):
    axes[i].set_title('Distribution of ' + k)
    axes[i].boxplot(data=df, x=k)

"""# Task4:"""

# Outlier is defined as a data point that is located outside the whiskers of the box plot. 
# For example, outside 1.5 times the interquartile range above the upper quartile and below the lower quartile 
# (Q1 - 1.5*IQR or Q3 + 1.5*IQR).

# If we observe closely. for the box 2, interquartile distance is roughly around 0.75 hence the values lying beyond 
# this range of (Q3 + 1.5*IQR) or values lying below (Q1 - 1.5*IQR) are considered as outliers.

# Outliers for sepal width column

Q1 = np.percentile(df['sepal_width'], 25, interpolation = 'midpoint') 
Q3 = np.percentile(df['sepal_width'], 75, interpolation = 'midpoint')
IQR = Q3 - Q1
 
# Upper bound (Maximum)
upper = Q3+1.5*IQR

# Lower bound(Minimum)
lower = Q1-1.5*IQR

print("Upper bound(Maximum) : ", upper)
print("Lower bound(Minimum) : ", lower)

# values below 2.05 or above 4.05 are considered as outliers

print("Outliers: \n\n", df[(df['sepal_width']<lower) | (df['sepal_width']>upper)])

# Removing the Outliers
print("Old Shape: ", df.shape) 
df = df[(df['sepal_width']>=lower) & (df['sepal_width']<=upper)]
print("New Shape: ", df.shape)