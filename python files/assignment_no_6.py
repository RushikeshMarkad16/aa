# -*- coding: utf-8 -*-
"""Assignment_No_6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eupzhFALKGBIPMJSb48nzscMARvZYeIu

# Data Analytics III
1. Implement Simple Na√Øve Bayes classification algorithm using Python/R on iris.csv dataset.
2. Compute Confusion matrix to find TP, FP, TN, FN, Accuracy, Error rate, Precision, Recall
on the given dataset.
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, accuracy_score
from mlxtend.plotting import plot_confusion_matrix

dataset = pd.read_csv('Iris.csv')

dataset.head(5)

dataset.describe()

X = dataset.iloc[:,1:5].values
y = dataset['Species'].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.fit_transform(X_test)

from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test) 
y_pred

cm = confusion_matrix(y_test, y_pred)
cm

class_names = ['Iris-setosa', 'Iris-versicolor', 'Iris-virginica']

fig, ax = plot_confusion_matrix(conf_mat=cm, show_absolute=True, show_normed=False, colorbar=True, class_names=class_names)
plt.title('Confusion Matrix')
plt.show()

df = pd.DataFrame({'Real Values':y_test, 'Predicted Values':y_pred})
df

print ("Accuracy : ", accuracy_score(y_test, y_pred))

print('Precision: %.3f' % precision_score(y_test, y_pred, average='micro'))

print('Recall: %.3f' % recall_score(y_test, y_pred, average='micro'))

print('F1 Score: %.3f' % f1_score(y_test, y_pred, average='micro'))